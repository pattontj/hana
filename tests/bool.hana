

(def life 42)

(def make-greeter
  (lambda (greeting)
          (lambda () greeting)))


(def greet-world (make-greeter "Hello, world!"))
(def greet-universe (make-greeter "Hello, universe!"))




(def my-list '(1 2 3 4))


(car (cdr (cdr (cdr my-list))))

(progn
  (greet-world)
  (greet-universe))



(let ((x 1)
      (y 2)
      (z 3)
      )
    (+ x y z)
)


(let ((x life)
      (y life))
  (progn
    (def tmp life)
    (def tmp (+ tmp 1))
    (def tmp (+ tmp 2))
    (def tmp (+ tmp 3))
    (def tmp (/ tmp 2))
    tmp))


(set life 0)
life


(def l (list 1 2 3 4))
(nth 4 l)
(len l)
(cdr l)


(last l)
(list 1 l)
